name: Build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # This runs the action every 24 hours
  release:
    types: [published]

env:
  REGISTRY_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/geysermc-proxy

jobs:
  update-latest-build-info:
    runs-on: ubuntu-latest
    outputs:
      build_info_updated: ${{ steps.pre-build.outputs.build_info_updated }}
      build_info: ${{ steps.pre-build.outputs.build_info }}
    steps:
      - name: Determine branch from Release event
        if: ${{ github.event_name == 'release' }}
        id: branch-release
        run: |
          if [ "${{ github.event.release.prerelease }}" != "true" ]; then
            echo "BRANCH=main" >> $GITHUB_ENV
          else
            echo "BRANCH=prerelease" >> $GITHUB_ENV
          fi
      - name: Determine branch default
        if: ${{ github.event_name != 'release' }}
        id: branch-default
        run: |
          echo "BRANCH=main" >> $GITHUB_ENV

      - name: Get Version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        if: ${{ always() && steps.*.outputs.BRANCH != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.*.outputs.BRANCH }}
          fetch-depth: 0
 
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Pre-build
        id: pre-build
        run: ./.github/workflows/scripts/pre-build.sh

      - name: Check for build info updates
        id: updates
        if: ${{ success() }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add --force build-info.json templates/geyser_config.template.yml Dockerfile README.md
          if git diff --cached --exit-code; then
            echo "No changes to commit"
            echo "build_info_updated=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "build_info_updated=true" >> "$GITHUB_OUTPUT"
            echo "build_info=\"$(jq -c '[(.)]' build-info.json)\"" >> "$GITHUB_OUTPUT"
          fi
        env:
          REGISTRY_IMAGE: ${{ env.REGISTRY_IMAGE }}

      - name: Commit and push changes
        if: ${{ steps.updates.outputs.build_info_updated == 'true' }}
        run: |
          git commit -m "build: Update build_info and generated files: $VERSION"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build:
    needs: update-latest-build-info
    if: ${{ needs.update-latest-build-info.result == 'success' && needs.update-latest-build-info.outputs.build_info_updated == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.update-latest-build-info.outputs.build_info) }}
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Pull latest
        run: git pull origin main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          provenance: mode=max
          sbom: true
          platforms: |-
            linux/amd64
            linux/arm64/v8
          tags: |-
            ${{ join(matrix.tags, '
            ') }}
          build-args: |
            JAVA_VERSION=17
            IMAGE_VERSION=${{ matrix.version }}
            GEYSER_VERSION=${{ matrix.geyser.version }}
            GEYSER_BUILD=${{ matrix.geyser.build }}
            GEYSER_DOWNLOAD_URL=${{ matrix.geyser.artifact.url }}
            GEYSER_JAR_SHA256=${{ matrix.geyser.artifact.sha256 }}
      
      